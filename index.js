#!/usr/bin/env node

const path = require('path');
const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');
const dotenv = require('dotenv');
const fs = require('fs').promises; // Need fs here for initial dir validation

// Import core summary generator
const { generateProjectSummary } = require('./project_summary');

// Import new LLM and rendering modules
const { processWithLLM } = require('./llm_processor');
const { renderAndServe } = require('./web_renderer');

// Load environment variables from .env file
dotenv.config();

// Dynamically import clipboardy (still needed for non-LLM mode or --copy)
let clipboardy;
async function loadClipboardy() {
    try {
        clipboardy = (await import('clipboardy')).default;
    } catch (err) {
        console.error("Warning: Failed to load clipboardy. Clipboard functionality will be disabled.", err.message);
        clipboardy = null;
    }
}


async function main() {
    await loadClipboardy(); // Load clipboardy before parsing args if possible

    const argv = await yargs(hideBin(process.argv))
        .usage('Usage: $0 <directory_path> [options]')
        .command('$0 <directory>', 'Summarize the codebase in the specified directory.', (yargs) => {
            yargs.positional('directory', {
                describe: 'Path to the project root directory',
                type: 'string',
                normalize: true
            });
        })
        .option('llm', {
            alias: 'L',
            type: 'boolean',
            default: false,
            description: 'Pass the summary output to an LLM for analysis and open in browser.'
        })
        .option('prompt', {
            alias: 'p',
            type: 'string',
            default: 'prompt_template.txt',
            description: 'Path to the prompt template file for LLM processing.'
        })
        .option('model', {
            alias: 'm',
            type: 'string',
            default: 'o4-mini', // Or 'o4-mini', 'gpt-4.1-mini' or 'gpt-4o' or another preferred model
            description: 'OpenAI model name to use for LLM processing.'
        })
        .option('temperature', {
            alias: 't',
            type: 'number',
            default: 1,
            description: 'Temperature setting for the LLM (0.0 to 2.0).'
        })
        .option('copy', {
             alias: 'c',
             type: 'boolean',
             // No explicit default here; handled in logic below based on --llm
             description: 'Copy the generated summary to the clipboard. If --llm is used, this defaults to false. Otherwise, it defaults to true.'
        })
        .option('folder-structure-only', {
            alias: 's',
            type: 'boolean',
            default: false,
            description: 'Output only the folder structure and nothing else.'
        })
        .demandCommand(1, 'You must provide the directory path.')
        .help('h').alias('h', 'help')
        .epilog('Generated by summarize-code-base')
        .argv;

    const targetDir = path.resolve(argv.directory);
    const projectName = path.basename(targetDir);

    // --- Print Start Message ---
    console.log(`Project Code Summarizer for '${projectName}' starts...`);

    // 1. Validate directory
    try {
        const stats = await fs.stat(targetDir);
        if (!stats.isDirectory()) {
            console.error(`\nError: Provided path is not a directory: ${targetDir}`);
            process.exit(1);
        }
    } catch (error) {
        if (error.code === 'ENOENT') console.error(`\nError: Directory not found: ${targetDir}`);
        else console.error(`\nError accessing directory: ${error.message}`);
        process.exit(1);
    }

    // 2. Generate the project summary string
    const summaryString = await generateProjectSummary(targetDir, {
        folderStructureOnly: argv.folderStructureOnly
    });

    // --- Process based on flags ---
    if (argv.llm) {
        const apiKey = process.env.OPENAI_API_KEY;
        if (!apiKey) {
            console.error("\nError: OPENAI_API_KEY is not set.");
            console.error("Please create a .env file in the project root with OPENAI_API_KEY=YOUR_KEY");
            console.error("You can get your key from https://platform.openai.com/api-keys");
            process.exit(1);
        }

        try {
            const llmResponse = await processWithLLM(summaryString, {
                promptTemplatePath: argv.prompt,
                model: argv.model,
                temperature: argv.temperature,
                apiKey: apiKey, // Pass the key from environment
            });

            if (llmResponse) {
                await renderAndServe(llmResponse, projectName);
            } else {
                 console.log("\nLLM processing completed, but no response was received or rendered.");
            }

        } catch (error) {
            console.error("\nAn error occurred during LLM processing or rendering:", error.message);
            process.exit(1);
        }

    } else {
        // Default behavior: Print to console and copy to clipboard
        console.log('\n' + summaryString); // Print the summary

        // Handle clipboard copying
        // Determine if the summary should be copied to the clipboard
        let shouldCopy;
        if (argv.llm) {
            // With --llm, copy only if --copy is explicitly true. Defaults to false.
            shouldCopy = argv.copy === true;
        } else {
            // Without --llm, copy unless --no-copy is explicitly given. Defaults to true.
            shouldCopy = argv.copy !== false; // True if argv.copy is true or undefined
        }

        if (shouldCopy && clipboardy) {
            try {
                await clipboardy.write(summaryString);
                console.log('\n✅ Summary copied to clipboard!');
            } catch (error) {
                console.error('\n❌ Failed to copy summary to clipboard:', error.message);
            }
        } else if (shouldCopy && !clipboardy) {
            console.log('\n⚠️ Clipboard functionality not available.')
        }
    }

    console.log(`\nProject Code Summarizer for '${projectName}' ends.`); // Final message
}

// Run main
main().catch(error => {
    console.error('\nAn unexpected error occurred:', error);
    process.exit(1);
});
